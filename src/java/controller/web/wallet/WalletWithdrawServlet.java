package controller.web.wallet;

import dao.WalletDAO;
import dao.WithdrawalRequestDAO;
import dao.PaymentMethodDAO;
import model.User;
import model.Wallet;
import model.WithdrawalRequest;
import model.PaymentMethod;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;

import java.io.IOException;
import java.math.BigDecimal;
import java.util.List;
import java.util.ArrayList;

/**
 * ‚úÖ ENHANCED: Servlet ƒë·ªÉ x·ª≠ l√Ω r√∫t ti·ªÅn t·ª´ v√≠ v·ªõi PaymentMethodDAO th·ª±c
 * - Fixed: Lu√¥n t·∫°o payment method demo n·∫øu user ch∆∞a c√≥
 * - Enhanced: Load s·∫µn payment methods ngay t·ª´ ƒë·∫ßu
 */
@WebServlet("/wallet/withdraw")
public class WalletWithdrawServlet extends HttpServlet {
    
    private WalletDAO walletDAO;
    private WithdrawalRequestDAO withdrawalRequestDAO;
    private PaymentMethodDAO paymentMethodDAO;
    
    @Override
    public void init() throws ServletException {
        walletDAO = new WalletDAO();
        withdrawalRequestDAO = new WithdrawalRequestDAO();
        paymentMethodDAO = new PaymentMethodDAO();
        
        System.out.println("‚úÖ WalletWithdrawServlet initialized successfully");
    }
    
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) 
            throws ServletException, IOException {
        
        System.out.println("\nüîç === WALLET WITHDRAW - doGet ===");
        
        // Ki·ªÉm tra ƒëƒÉng nh·∫≠p
        HttpSession session = request.getSession();
        User user = (User) session.getAttribute("user");
        
        if (user == null) {
            response.sendRedirect(request.getContextPath() + "/view/jsp/home/login.jsp");
            return;
        }
        
        try {
            // L·∫•y th√¥ng tin v√≠
            Wallet wallet = walletDAO.getWalletByUserId(user.getUserId());
            if (wallet == null) {
                session.setAttribute("errorMessage", "Kh√¥ng t√¨m th·∫•y v√≠ ƒëi·ªán t·ª≠. Vui l√≤ng li√™n h·ªá h·ªó tr·ª£.");
                response.sendRedirect(request.getContextPath() + "/wallet");
                return;
            }
            
            // ‚úÖ ENHANCED: L·∫•y payment methods v√† t·∫°o demo n·∫øu ch∆∞a c√≥
            List<PaymentMethod> verifiedPaymentMethods = getOrCreatePaymentMethods(user);
            
            // L·∫•y l·ªãch s·ª≠ r√∫t ti·ªÅn
            List<WithdrawalRequest> withdrawalHistory = withdrawalRequestDAO.getWithdrawalRequestsByUserId(user.getUserId());
            
            // Set attributes ƒë·ªÉ hi·ªÉn th·ªã
            request.setAttribute("wallet", wallet);
            request.setAttribute("verifiedPaymentMethods", verifiedPaymentMethods);
            request.setAttribute("withdrawalHistory", withdrawalHistory);
            request.setAttribute("user", user);
            
            System.out.println("‚úÖ Loaded withdraw page data:");
            System.out.println("   - Wallet balance: " + wallet.getBalance());
            System.out.println("   - Verified payment methods: " + verifiedPaymentMethods.size());
            System.out.println("   - Withdrawal history: " + withdrawalHistory.size());
            
            // Forward ƒë·∫øn trang r√∫t ti·ªÅn
            request.getRequestDispatcher("/view/jsp/customer/wallet-withdraw.jsp").forward(request, response);
            
        } catch (Exception e) {
            System.err.println("‚ùå Error in WalletWithdrawServlet doGet: " + e.getMessage());
            e.printStackTrace();
            
            session.setAttribute("errorMessage", "C√≥ l·ªói x·∫£y ra khi t·∫£i trang r√∫t ti·ªÅn. Vui l√≤ng th·ª≠ l·∫°i sau.");
            response.sendRedirect(request.getContextPath() + "/wallet");
        }
    }
    
    /**
     * ‚úÖ ENHANCED: L·∫•y ho·∫∑c t·∫°o payment methods cho user
     */
    private List<PaymentMethod> getOrCreatePaymentMethods(User user) {
        try {
            // L·∫•y payment methods hi·ªán c√≥
            List<PaymentMethod> existingMethods = paymentMethodDAO.getVerifiedPaymentMethods(user.getUserId());
            
            if (existingMethods != null && !existingMethods.isEmpty()) {
                System.out.println("‚úÖ Found " + existingMethods.size() + " existing payment methods for user: " + user.getEmail());
                return existingMethods;
            }
            
            // ‚úÖ T·∫†O DEMO PAYMENT METHODS N·∫æU CH∆ØA C√ì
            System.out.println("üîß Creating demo payment methods for user: " + user.getEmail());
            
            List<PaymentMethod> demoMethods = new ArrayList<>();
            
            // T·∫°o method 1: T√†i kho·∫£n ch√≠nh
            PaymentMethod method1 = new PaymentMethod(
                user.getUserId(), 
                "bank_account", 
                "T√†i kho·∫£n ch√≠nh", 
                "1234567890", 
                "Vietcombank", 
                user.getFullName()
            );
            method1.setDefault(true);
            method1.setVerificationStatus("verified");
            
            int method1Id = paymentMethodDAO.createPaymentMethod(method1);
            if (method1Id > 0) {
                method1.setMethodId(method1Id);
                demoMethods.add(method1);
                System.out.println("‚úÖ Created demo payment method 1: Vietcombank");
            }
            
            // T·∫°o method 2: T√†i kho·∫£n ph·ª•
            PaymentMethod method2 = new PaymentMethod(
                user.getUserId(), 
                "bank_account", 
                "T√†i kho·∫£n ph·ª•", 
                "0987654321", 
                "Techcombank", 
                user.getFullName()
            );
            method2.setDefault(false);
            method2.setVerificationStatus("verified");
            
            int method2Id = paymentMethodDAO.createPaymentMethod(method2);
            if (method2Id > 0) {
                method2.setMethodId(method2Id);
                demoMethods.add(method2);
                System.out.println("‚úÖ Created demo payment method 2: Techcombank");
            }
            
            System.out.println("‚úÖ Successfully created " + demoMethods.size() + " demo payment methods");
            return demoMethods;
            
        } catch (Exception e) {
            System.err.println("‚ùå Error in getOrCreatePaymentMethods: " + e.getMessage());
            e.printStackTrace();
            
            // Return empty list if error
            return new ArrayList<>();
        }
    }
    
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) 
            throws ServletException, IOException {
        
        System.out.println("\nüìù === WALLET WITHDRAW - doPost ===");
        
        // Ki·ªÉm tra ƒëƒÉng nh·∫≠p
        HttpSession session = request.getSession();
        User user = (User) session.getAttribute("user");
        
        if (user == null) {
            response.sendRedirect(request.getContextPath() + "/view/jsp/home/login.jsp");
            return;
        }
        
        String action = request.getParameter("action");
        
        if (action == null) {
            doGet(request, response);
            return;
        }
        
        switch (action) {
            case "request_withdraw":
                handleWithdrawRequest(request, response, user);
                break;
            case "add_payment_method":
                handleAddPaymentMethod(request, response, user);
                break;
            default:
                doGet(request, response);
                break;
        }
    }
    
    /**
     * ‚úÖ ENHANCED: X·ª≠ l√Ω y√™u c·∫ßu r√∫t ti·ªÅn v·ªõi validation ƒë·∫ßy ƒë·ªß
     */
    private void handleWithdrawRequest(HttpServletRequest request, HttpServletResponse response, User user) 
            throws ServletException, IOException {
        
        System.out.println("üí∏ === HANDLING WITHDRAW REQUEST ===");
        
        HttpSession session = request.getSession();
        
        try {
            // L·∫•y th√¥ng tin t·ª´ form
            String amountStr = request.getParameter("amount");
            String paymentMethodIdStr = request.getParameter("paymentMethodId");
            String note = request.getParameter("note");
            
            // Validate input
            if (amountStr == null || amountStr.trim().isEmpty()) {
                session.setAttribute("errorMessage", "Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn c·∫ßn r√∫t.");
                response.sendRedirect(request.getContextPath() + "/wallet/withdraw");
                return;
            }
            
            if (paymentMethodIdStr == null || paymentMethodIdStr.trim().isEmpty()) {
                session.setAttribute("errorMessage", "Vui l√≤ng ch·ªçn ph∆∞∆°ng th·ª©c nh·∫≠n ti·ªÅn.");
                response.sendRedirect(request.getContextPath() + "/wallet/withdraw");
                return;
            }
            
            // Parse and validate amount
            BigDecimal amount;
            try {
                // Remove commas if any (from number formatting)
                String cleanAmountStr = amountStr.replace(",", "");
                amount = new BigDecimal(cleanAmountStr);
            } catch (NumberFormatException e) {
                session.setAttribute("errorMessage", "S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá.");
                response.sendRedirect(request.getContextPath() + "/wallet/withdraw");
                return;
            }
            
            int paymentMethodId = Integer.parseInt(paymentMethodIdStr);
            
            System.out.println("üìù Withdraw request details:");
            System.out.println("   - User: " + user.getEmail() + " (ID: " + user.getUserId() + ")");
            System.out.println("   - Amount: " + amount);
            System.out.println("   - Payment method ID: " + paymentMethodId);
            System.out.println("   - Note: " + note);
            
            // Validate s·ªë ti·ªÅn
            if (amount.compareTo(BigDecimal.valueOf(50000)) < 0) {
                session.setAttribute("errorMessage", "S·ªë ti·ªÅn r√∫t t·ªëi thi·ªÉu l√† 50,000 VNƒê.");
                response.sendRedirect(request.getContextPath() + "/wallet/withdraw");
                return;
            }
            
            if (amount.compareTo(BigDecimal.valueOf(10000000)) > 0) {
                session.setAttribute("errorMessage", "S·ªë ti·ªÅn r√∫t t·ªëi ƒëa l√† 10,000,000 VNƒê m·ªói l·∫ßn.");
                response.sendRedirect(request.getContextPath() + "/wallet/withdraw");
                return;
            }
            
            // L·∫•y th√¥ng tin v√≠
            Wallet wallet = walletDAO.getWalletByUserId(user.getUserId());
            if (wallet == null) {
                session.setAttribute("errorMessage", "Kh√¥ng t√¨m th·∫•y v√≠ ƒëi·ªán t·ª≠.");
                response.sendRedirect(request.getContextPath() + "/wallet/withdraw");
                return;
            }
            
            // Ki·ªÉm tra s·ªë d∆∞
            if (!wallet.hasEnoughBalance(amount)) {
                session.setAttribute("errorMessage", 
                    String.format("S·ªë d∆∞ kh√¥ng ƒë·ªß. S·ªë d∆∞ kh·∫£ d·ª•ng: %s", 
                        java.text.NumberFormat.getCurrencyInstance(new java.util.Locale("vi", "VN")).format(wallet.getBalance())));
                response.sendRedirect(request.getContextPath() + "/wallet/withdraw");
                return;
            }
            
            // ‚úÖ FIXED: L·∫•y th√¥ng tin payment method t·ª´ database th·ª±c
            PaymentMethod paymentMethod = paymentMethodDAO.getPaymentMethodById(paymentMethodId);
            if (paymentMethod == null) {
                session.setAttribute("errorMessage", "Ph∆∞∆°ng th·ª©c thanh to√°n kh√¥ng t·ªìn t·∫°i.");
                response.sendRedirect(request.getContextPath() + "/wallet/withdraw");
                return;
            }
            
            if (paymentMethod.getUserId() != user.getUserId()) {
                session.setAttribute("errorMessage", "Ph∆∞∆°ng th·ª©c thanh to√°n kh√¥ng thu·ªôc v·ªÅ b·∫°n.");
                response.sendRedirect(request.getContextPath() + "/wallet/withdraw");
                return;
            }
            
            // ‚úÖ T·∫°o WithdrawalRequest v·ªõi ƒë·∫ßy ƒë·ªß th√¥ng tin t·ª´ PaymentMethod
            WithdrawalRequest withdrawalRequest = new WithdrawalRequest(
                wallet.getWalletId(), user.getUserId(), amount, paymentMethodId);
            
            // Set th√¥ng tin ng√¢n h√†ng t·ª´ payment method
            withdrawalRequest.setBankName(paymentMethod.getBankName());
            withdrawalRequest.setAccountNumber(paymentMethod.getAccountNumber());
            withdrawalRequest.setAccountHolderName(paymentMethod.getAccountHolderName());
            
            System.out.println("üí∞ Withdrawal calculation:");
            System.out.println("   - Amount: " + withdrawalRequest.getAmount());
            System.out.println("   - Fee: " + withdrawalRequest.getFee());
            System.out.println("   - Net amount: " + withdrawalRequest.getNetAmount());
            System.out.println("   - Bank: " + withdrawalRequest.getBankName());
            System.out.println("   - Account: " + withdrawalRequest.getAccountNumber());
            
            // Ki·ªÉm tra l·∫°i s·ªë d·ª± sau khi t√≠nh ph√≠
            BigDecimal totalDeduction = withdrawalRequest.getAmount(); // Full amount will be deducted
            if (!wallet.hasEnoughBalance(totalDeduction)) {
                session.setAttribute("errorMessage", 
                    String.format("S·ªë d∆∞ kh√¥ng ƒë·ªß ƒë·ªÉ r√∫t %s (bao g·ªìm ph√≠ %s). S·ªë d∆∞ kh·∫£ d·ª•ng: %s", 
                        java.text.NumberFormat.getCurrencyInstance(new java.util.Locale("vi", "VN")).format(amount),
                        java.text.NumberFormat.getCurrencyInstance(new java.util.Locale("vi", "VN")).format(withdrawalRequest.getFee()),
                        java.text.NumberFormat.getCurrencyInstance(new java.util.Locale("vi", "VN")).format(wallet.getBalance())));
                response.sendRedirect(request.getContextPath() + "/wallet/withdraw");
                return;
            }
            
            // T·∫°o withdrawal request trong database
            int withdrawalId = withdrawalRequestDAO.createWithdrawalRequest(withdrawalRequest);
            
            if (withdrawalId > 0) {
                System.out.println("‚úÖ Withdrawal request created with ID: " + withdrawalId);
                
                session.setAttribute("successMessage", 
                    String.format("Y√™u c·∫ßu r√∫t ti·ªÅn %s ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng! " +
                                "Ph√≠ giao d·ªãch: %s. S·ªë ti·ªÅn nh·∫≠n ƒë∆∞·ª£c: %s. " +
                                "Y√™u c·∫ßu s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω trong v√≤ng 24 gi·ªù l√†m vi·ªác.",
                        java.text.NumberFormat.getCurrencyInstance(new java.util.Locale("vi", "VN")).format(amount),
                        java.text.NumberFormat.getCurrencyInstance(new java.util.Locale("vi", "VN")).format(withdrawalRequest.getFee()),
                        java.text.NumberFormat.getCurrencyInstance(new java.util.Locale("vi", "VN")).format(withdrawalRequest.getNetAmount())));
                
            } else {
                session.setAttribute("errorMessage", "Kh√¥ng th·ªÉ t·∫°o y√™u c·∫ßu r√∫t ti·ªÅn. Vui l√≤ng th·ª≠ l·∫°i.");
            }
            
        } catch (NumberFormatException e) {
            System.err.println("‚ùå Invalid number format: " + e.getMessage());
            session.setAttribute("errorMessage", "S·ªë ti·ªÅn ho·∫∑c ph∆∞∆°ng th·ª©c thanh to√°n kh√¥ng h·ª£p l·ªá.");
        } catch (Exception e) {
            System.err.println("‚ùå Error in handleWithdrawRequest: " + e.getMessage());
            e.printStackTrace();
            session.setAttribute("errorMessage", "C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω y√™u c·∫ßu r√∫t ti·ªÅn.");
        }
        
        response.sendRedirect(request.getContextPath() + "/wallet/withdraw");
    }
    
    /**
     * ‚úÖ REAL: X·ª≠ l√Ω th√™m ph∆∞∆°ng th·ª©c thanh to√°n (database implementation)
     */
    private void handleAddPaymentMethod(HttpServletRequest request, HttpServletResponse response, User user) 
            throws ServletException, IOException {
        
        System.out.println("üè¶ === HANDLING ADD PAYMENT METHOD ===");
        
        HttpSession session = request.getSession();
        
        try {
            // L·∫•y th√¥ng tin t·ª´ form
            String methodName = request.getParameter("methodName");
            String bankName = request.getParameter("bankName");
            String accountNumber = request.getParameter("accountNumber");
            String accountHolderName = request.getParameter("accountHolderName");
            boolean isDefault = "on".equals(request.getParameter("isDefault"));
            
            // Validate input
            if (methodName == null || methodName.trim().isEmpty()) {
                session.setAttribute("errorMessage", "Vui l√≤ng nh·∫≠p t√™n ph∆∞∆°ng th·ª©c thanh to√°n.");
                response.sendRedirect(request.getContextPath() + "/wallet/withdraw");
                return;
            }
            
            if (bankName == null || bankName.trim().isEmpty()) {
                session.setAttribute("errorMessage", "Vui l√≤ng ch·ªçn ng√¢n h√†ng.");
                response.sendRedirect(request.getContextPath() + "/wallet/withdraw");
                return;
            }
            
            if (accountNumber == null || accountNumber.trim().isEmpty()) {
                session.setAttribute("errorMessage", "Vui l√≤ng nh·∫≠p s·ªë t√†i kho·∫£n.");
                response.sendRedirect(request.getContextPath() + "/wallet/withdraw");
                return;
            }
            
            if (accountHolderName == null || accountHolderName.trim().isEmpty()) {
                session.setAttribute("errorMessage", "Vui l√≤ng nh·∫≠p t√™n ch·ªß t√†i kho·∫£n.");
                response.sendRedirect(request.getContextPath() + "/wallet/withdraw");
                return;
            }
            
            System.out.println("üìù Payment method details:");
            System.out.println("   - User: " + user.getEmail() + " (ID: " + user.getUserId() + ")");
            System.out.println("   - Method name: " + methodName);
            System.out.println("   - Bank: " + bankName);
            System.out.println("   - Account: " + accountNumber.replaceAll("\\d(?=\\d{4})", "*"));
            System.out.println("   - Holder: " + accountHolderName);
            System.out.println("   - Is default: " + isDefault);
            
            // ‚úÖ REAL: T·∫°o payment method trong database
            PaymentMethod newMethod = new PaymentMethod(user.getUserId(), "bank_account", methodName, 
                accountNumber, bankName, accountHolderName);
            newMethod.setDefault(isDefault);
            newMethod.setVerificationStatus("verified"); // Auto verify for now
            
            int newMethodId = paymentMethodDAO.createPaymentMethod(newMethod);
            
            if (newMethodId > 0) {
                System.out.println("‚úÖ REAL: Payment method created with ID: " + newMethodId);
                
                session.setAttribute("successMessage", 
                    "Ph∆∞∆°ng th·ª©c thanh to√°n ƒë√£ ƒë∆∞·ª£c th√™m th√†nh c√¥ng! " +
                    "Ph∆∞∆°ng th·ª©c ƒë√£ ƒë∆∞·ª£c x√°c minh v√† c√≥ th·ªÉ s·ª≠ d·ª•ng ngay l·∫≠p t·ª©c.");
            } else {
                session.setAttribute("errorMessage", "Kh√¥ng th·ªÉ th√™m ph∆∞∆°ng th·ª©c thanh to√°n. Vui l√≤ng th·ª≠ l·∫°i.");
            }
            
        } catch (Exception e) {
            System.err.println("‚ùå Error in handleAddPaymentMethod: " + e.getMessage());
            e.printStackTrace();
            session.setAttribute("errorMessage", "C√≥ l·ªói x·∫£y ra khi th√™m ph∆∞∆°ng th·ª©c thanh to√°n.");
        }
        
        response.sendRedirect(request.getContextPath() + "/wallet/withdraw");
    }
    
    @Override
    public void destroy() {
        System.out.println("üîÑ WalletWithdrawServlet destroyed");
        super.destroy();
    }
}