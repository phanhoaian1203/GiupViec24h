package controller.web.wallet;

import dao.WalletDAO;
import dao.DepositRequestDAO;
import model.User;
import model.Wallet;
import model.DepositRequest;
import service.VietQRService;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;

import java.io.IOException;
import java.math.BigDecimal;
import java.util.List;

/**
 * ‚úÖ FIXED: Servlet ch√≠nh ƒë·ªÉ x·ª≠ l√Ω c√°c ch·ª©c nƒÉng v√≠ ƒëi·ªán t·ª≠
 * - S·ª≠a l·ªói: Ch·ªâ t·∫°o DepositRequest khi user nh·∫•n "T√¥i ƒë√£ chuy·ªÉn kho·∫£n"
 * - T√°ch ri√™ng vi·ªác t·∫°o QR v√† t·∫°o deposit request
 */
@WebServlet("/wallet")
public class WalletServlet extends HttpServlet {
    
    private WalletDAO walletDAO;
    private DepositRequestDAO depositRequestDAO;
    private VietQRService vietQRService;
    
    @Override
    public void init() throws ServletException {
        walletDAO = new WalletDAO();
        depositRequestDAO = new DepositRequestDAO();
        vietQRService = new VietQRService();
        
        System.out.println("‚úÖ WalletServlet initialized successfully");
    }
    
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) 
            throws ServletException, IOException {
        
        System.out.println("\nüîç === WALLET SERVLET - doGet ===");
        
        // Ki·ªÉm tra ƒëƒÉng nh·∫≠p
        HttpSession session = request.getSession();
        User user = (User) session.getAttribute("user");
        
        if (user == null) {
            response.sendRedirect(request.getContextPath() + "/view/jsp/home/login.jsp");
            return;
        }
        
        try {
            // L·∫•y th√¥ng tin v√≠ c·ªßa user
            Wallet wallet = walletDAO.getWalletByUserId(user.getUserId());
            
            // N·∫øu ch∆∞a c√≥ v√≠, t·∫°o v√≠ m·ªõi
            if (wallet == null) {
                wallet = new Wallet(user.getUserId());
                boolean created = walletDAO.createWallet(wallet);
                
                if (created) {
                    wallet = walletDAO.getWalletByUserId(user.getUserId());
                } else {
                    request.setAttribute("error", "Kh√¥ng th·ªÉ t·∫°o v√≠ ƒëi·ªán t·ª≠. Vui l√≤ng th·ª≠ l·∫°i sau.");
                    request.getRequestDispatcher("/view/jsp/error.jsp").forward(request, response);
                    return;
                }
            }
            
            // L·∫•y l·ªãch s·ª≠ giao d·ªãch n·∫°p ti·ªÅn
            List<DepositRequest> depositHistory = depositRequestDAO.getDepositRequestsByUserId(user.getUserId());
            
            // Set attributes ƒë·ªÉ hi·ªÉn th·ªã
            request.setAttribute("wallet", wallet);
            request.setAttribute("depositHistory", depositHistory);
            request.setAttribute("user", user);
            
            System.out.println("‚úÖ Loaded wallet page data:");
            System.out.println("   - Wallet balance: " + wallet.getBalance());
            System.out.println("   - Deposit history: " + depositHistory.size() + " records");
            
            // Forward ƒë·∫øn trang v√≠
            request.getRequestDispatcher("/view/jsp/customer/wallet.jsp").forward(request, response);
            
        } catch (Exception e) {
            System.err.println("‚ùå Error in WalletServlet doGet: " + e.getMessage());
            e.printStackTrace();
            
            request.setAttribute("error", "C√≥ l·ªói x·∫£y ra khi t·∫£i th√¥ng tin v√≠. Vui l√≤ng th·ª≠ l·∫°i sau.");
            request.getRequestDispatcher("/view/jsp/error.jsp").forward(request, response);
        }
    }
    
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) 
            throws ServletException, IOException {
        
        System.out.println("\nüìù === WALLET SERVLET - doPost ===");
        
        // X·ª≠ l√Ω c√°c action kh√°c nhau
        String action = request.getParameter("action");
        
        if (action == null) {
            doGet(request, response);
            return;
        }
        
        System.out.println("üìù POST Action: " + action);
        
        switch (action) {
            case "create_qr":
                handleCreateQR(request, response);
                break;
            case "confirm_deposit":
                handleConfirmDeposit(request, response);
                break;
            case "withdraw":
                handleWithdraw(request, response);
                break;
            case "view_history":
                handleViewHistory(request, response);
                break;
            default:
                doGet(request, response);
                break;
        }
    }
    
    /**
     * ‚úÖ NEW: X·ª≠ l√Ω t·∫°o m√£ QR m√† KH√îNG t·∫°o DepositRequest
     * Ch·ªâ t·∫°o QR ƒë·ªÉ hi·ªÉn th·ªã cho user
     */
    private void handleCreateQR(HttpServletRequest request, HttpServletResponse response) 
            throws ServletException, IOException {
        
        System.out.println("üî• === HANDLING CREATE QR (NO DEPOSIT REQUEST YET) ===");
        
        HttpSession session = request.getSession();
        User user = (User) session.getAttribute("user");
        
        if (user == null) {
            response.sendRedirect(request.getContextPath() + "/view/jsp/home/login.jsp");
            return;
        }
        
        try {
            // L·∫•y s·ªë ti·ªÅn t·ª´ form
            String amountStr = request.getParameter("amount");
            if (amountStr == null || amountStr.trim().isEmpty()) {
                session.setAttribute("errorMessage", "Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn c·∫ßn n·∫°p.");
                response.sendRedirect(request.getContextPath() + "/wallet");
                return;
            }
            
            BigDecimal amount = new BigDecimal(amountStr);
            
            // Validate s·ªë ti·ªÅn
            if (amount.compareTo(BigDecimal.valueOf(10000)) < 0) {
                session.setAttribute("errorMessage", "S·ªë ti·ªÅn n·∫°p t·ªëi thi·ªÉu l√† 10,000 VNƒê.");
                response.sendRedirect(request.getContextPath() + "/wallet");
                return;
            }
            
            if (amount.compareTo(BigDecimal.valueOf(50000000)) > 0) {
                session.setAttribute("errorMessage", "S·ªë ti·ªÅn n·∫°p t·ªëi ƒëa l√† 50,000,000 VNƒê.");
                response.sendRedirect(request.getContextPath() + "/wallet");
                return;
            }
            
            // L·∫•y v√≠ c·ªßa user
            Wallet wallet = walletDAO.getWalletByUserId(user.getUserId());
            if (wallet == null) {
                session.setAttribute("errorMessage", "Kh√¥ng t√¨m th·∫•y v√≠ ƒëi·ªán t·ª≠.");
                response.sendRedirect(request.getContextPath() + "/wallet");
                return;
            }
            
            // ‚úÖ CH·ªà T·∫†O TRANSACTION ID V√Ä QR - KH√îNG T·∫†O DEPOSIT REQUEST
            String transactionId = vietQRService.generateTransactionId(user.getUserId());
            
            System.out.println("‚úÖ Generated QR info (NO DEPOSIT REQUEST):");
            System.out.println("   - User: " + user.getEmail());
            System.out.println("   - Amount: " + amount);
            System.out.println("   - Transaction ID: " + transactionId);
            
            // T·∫°o QR code URL v√† bank info
            String description = "Nap tien vao vi Giup Viec 24h";
            String qrUrl = vietQRService.generateVietQRUrl(amount, transactionId, description);
            String mobileUrl = vietQRService.generateVietQRMobileUrl(amount, transactionId, description);
            VietQRService.BankTransferInfo bankInfo = vietQRService.generateBankTransferInfo(amount, transactionId, description);
            
            // ‚úÖ L∆ØU TH√îNG TIN V√ÄO SESSION ƒê·ªÇ S·ª¨ D·ª§NG KHI CONFIRM
            session.setAttribute("pendingDeposit_amount", amount);
            session.setAttribute("pendingDeposit_transactionId", transactionId);
            session.setAttribute("pendingDeposit_walletId", wallet.getWalletId());
            
            // Set attributes cho trang deposit
            request.setAttribute("transactionId", transactionId);
            request.setAttribute("amount", amount);
            request.setAttribute("qrUrl", qrUrl);
            request.setAttribute("mobileUrl", mobileUrl);
            request.setAttribute("bankInfo", bankInfo);
            request.setAttribute("user", user);
            request.setAttribute("wallet", wallet);
            
            System.out.println("‚úÖ QR created successfully - forwarding to deposit page");
            
            // Forward ƒë·∫øn trang hi·ªÉn th·ªã QR
            request.getRequestDispatcher("/view/jsp/customer/wallet-deposit.jsp").forward(request, response);
            
        } catch (NumberFormatException e) {
            session.setAttribute("errorMessage", "S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá.");
            response.sendRedirect(request.getContextPath() + "/wallet");
        } catch (Exception e) {
            System.err.println("‚ùå Error in handleCreateQR: " + e.getMessage());
            e.printStackTrace();
            
            session.setAttribute("errorMessage", "C√≥ l·ªói x·∫£y ra khi t·∫°o m√£ QR.");
            response.sendRedirect(request.getContextPath() + "/wallet");
        }
    }
    
    /**
     * ‚úÖ NEW: X·ª≠ l√Ω x√°c nh·∫≠n ƒë√£ chuy·ªÉn kho·∫£n
     * CH·ªà T·∫†I ƒê√ÇY M·ªöI T·∫†O DEPOSIT REQUEST
     */
    private void handleConfirmDeposit(HttpServletRequest request, HttpServletResponse response) 
            throws ServletException, IOException {
        
        System.out.println("üî• === HANDLING CONFIRM DEPOSIT (CREATE DEPOSIT REQUEST) ===");
        
        HttpSession session = request.getSession();
        User user = (User) session.getAttribute("user");
        
        if (user == null) {
            response.sendRedirect(request.getContextPath() + "/view/jsp/home/login.jsp");
            return;
        }
        
        try {
            // ‚úÖ L·∫§Y TH√îNG TIN T·ª™ SESSION (ƒë√£ l∆∞u khi t·∫°o QR)
            BigDecimal amount = (BigDecimal) session.getAttribute("pendingDeposit_amount");
            String transactionId = (String) session.getAttribute("pendingDeposit_transactionId");
            Integer walletId = (Integer) session.getAttribute("pendingDeposit_walletId");
            
            if (amount == null || transactionId == null || walletId == null) {
                session.setAttribute("errorMessage", "Th√¥ng tin giao d·ªãch kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n.");
                response.sendRedirect(request.getContextPath() + "/wallet");
                return;
            }
            
            System.out.println("‚úÖ Confirming deposit with session data:");
            System.out.println("   - User: " + user.getEmail());
            System.out.println("   - Amount: " + amount);
            System.out.println("   - Transaction ID: " + transactionId);
            System.out.println("   - Wallet ID: " + walletId);
            
            // ‚úÖ B√ÇY GI·ªú M·ªöI T·∫†O DEPOSIT REQUEST
            DepositRequest depositRequest = new DepositRequest(walletId, user.getUserId(), amount);
            depositRequest.setGatewayTransactionId(transactionId);
            depositRequest.setGatewayName("vietqr");
            
            int depositId = depositRequestDAO.createDepositRequest(depositRequest);
            
            if (depositId > 0) {
                // ‚úÖ X√ìA TH√îNG TIN KH·ªéI SESSION SAU KHI T·∫†O TH√ÄNH C√îNG
                session.removeAttribute("pendingDeposit_amount");
                session.removeAttribute("pendingDeposit_transactionId");
                session.removeAttribute("pendingDeposit_walletId");
                
                session.setAttribute("successMessage", 
                    "ƒê√£ x√°c nh·∫≠n chuy·ªÉn kho·∫£n th√†nh c√¥ng! Y√™u c·∫ßu n·∫°p ti·ªÅn ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω b·ªüi nh√¢n vi√™n. M√£ giao d·ªãch: " + transactionId);
                
                System.out.println("‚úÖ Deposit request created successfully with ID: " + depositId);
                
            } else {
                session.setAttribute("errorMessage", "Kh√¥ng th·ªÉ t·∫°o y√™u c·∫ßu n·∫°p ti·ªÅn. Vui l√≤ng th·ª≠ l·∫°i.");
            }
            
        } catch (Exception e) {
            System.err.println("‚ùå Error in handleConfirmDeposit: " + e.getMessage());
            e.printStackTrace();
            
            session.setAttribute("errorMessage", "C√≥ l·ªói x·∫£y ra khi x√°c nh·∫≠n giao d·ªãch.");
        }
        
        response.sendRedirect(request.getContextPath() + "/wallet");
    }
    
    /**
     * X·ª≠ l√Ω y√™u c·∫ßu r√∫t ti·ªÅn
     */
    private void handleWithdraw(HttpServletRequest request, HttpServletResponse response) 
            throws ServletException, IOException {
        
        // Redirect ƒë·∫øn trang r√∫t ti·ªÅn ri√™ng
        response.sendRedirect(request.getContextPath() + "/wallet/withdraw");
    }
    
    /**
     * X·ª≠ l√Ω xem l·ªãch s·ª≠ giao d·ªãch
     */
    private void handleViewHistory(HttpServletRequest request, HttpServletResponse response) 
            throws ServletException, IOException {
        
        // Redirect ƒë·∫øn trang l·ªãch s·ª≠ giao d·ªãch
        response.sendRedirect(request.getContextPath() + "/wallet/history");
    }
}